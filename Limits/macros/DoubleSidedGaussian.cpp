/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "DoubleSidedGaussian.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "RooGaussian.h"

ClassImp(DoubleSidedGaussian) 

DoubleSidedGaussian::DoubleSidedGaussian(const char *name, const char *title, 
                       RooAbsReal& _x,
                       RooAbsReal& _mean,
                       RooAbsReal& _sig1,
                       RooAbsReal& _sig2) :
  RooAbsPdf(name,title), 
  x("x","x",this,_x),
  mean("mean","mean",this,_mean),
  sig1("sig1","sig1",this,_sig1),
  sig2("sig2","sig2",this,_sig2)
{ 
} 


DoubleSidedGaussian::DoubleSidedGaussian(const DoubleSidedGaussian& other, const char* name) :  
  RooAbsPdf(other,name), 
  x("x",this,other.x),
  mean("mean",this,other.mean),
  sig1("sig1",this,other.sig1),
  sig2("sig2",this,other.sig2)
{ 
} 



Double_t DoubleSidedGaussian::evaluate() const 
{ 
  double result = -1;
  double sqrt2divpi = TMath::Power( 2 / TMath::Pi(), 0.5); 
  double mode = mean - sqrt2divpi * (sig2 - sig1);
  double A = sqrt2divpi / (sig1 + sig2); 
  double G1_at_mode = sqrt2divpi / sig1; // This constant normalizes integral of each to .5
  double G2_at_mode = sqrt2divpi / sig2; // This constant normalizes integral of each to .5
  double G_diff = G1_at_mode - G2_at_mode;
  double total_integral = 1.0 + G_diff * (25 - mode);
  if ( x < mode)
    result = TMath::Exp(-1 * (x-mode) * (x-mode) / (2 * sig1 * sig1)) / total_integral;
  else
    result = (TMath::Exp(-1 * (x-mode) * (x-mode) / (2 * sig2 * sig2)) + G_diff) / total_integral;
  return A*result ;
} 

